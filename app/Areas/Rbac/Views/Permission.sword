<m-navbar>
    <m-button @click="do_rebuild" type="primary" icon="el-icon-refresh">重新扫描</m-button>
    <m-selector filterable v-model="filter.permission_code" :data="permission_codes"></m-selector>
    <m-selector v-model="filter.grantable" :data="grantables"></m-selector>
</m-navbar>
<m-dialog mode="edit">
    <m-text prop="permission_id" disabled></m-text>
    <m-text prop="permission_code" disabled></m-text>
    <m-text prop="authorize" disabled></m-text>
    <m-text prop="display_name"></m-text>
</m-dialog>
<m-table :data="filteredResponse" row-class-name="el-alert el-alert--warning is-light">
    <m-index></m-index>
    <m-id prop="permission_id"></m-id>
    <m-text prop="permission_code" width="200" title="display_name"></m-text>
    <m-tag prop="roles"></m-tag>
    <m-text prop="grantable" width="80" label="可授权"></m-text>
    <m-text prop="authorize" width="100"></m-text>
    <m-timestamp prop="updated_time"></m-timestamp>
    <m-ops ops="edit,delete"></m-ops>
</m-table>
@section('script')
    <script>

        vm = new App({
            data: {
                topic: '权限',
                request: {},
                response: [],
                edit: {},
                filter: {
                    permission_code: '',
                    grantable: '',
                },
                label: {
                    permission_id: '权限ID',
                    permission_code: '权限代码',
                    authorize: '内置授限',
                    roles: '角色列表',
                },
                grantables: {
                    1: '可授权',
                    0: '不可授权',
                },
            },
            computed: {
                filteredResponse() {
                    let filter = this.filter;
                    return this.response.filter(v => {
                        if (filter.permission_code !== '' && !v.permission_code.startsWith(filter.permission_code + ':')) {
                            return false;
                        }
                        if (filter.grantable !== '' && v.grantable != filter.grantable) {
                            return false;
                        }

                        return true;
                    });
                },
                permission_codes() {
                    let permission_codes = [];
                    for (let item of this.response) {
                        let permission_code = item.permission_code;

                        let pos = permission_code.indexOf(':');
                        if (pos !== -1) {
                            let controller = permission_code.substring(0, pos);
                            if (!permission_codes.includes(controller)) {
                                permission_codes.push(controller);
                            }
                        }
                    }
                    return permission_codes.sort();
                }
            },
            methods: {
                do_rebuild() {
                    this.ajaxPost("rebuild", {}, () => this.reload());
                }
            }
        });
    </script>
@append
